"""
Interface to hold contents of api responses when they do not confirm
to the OpenAI style response.
"""

from typing import Literal, Optional, List
from pydantic import BaseModel


class Function(BaseModel):
    """Represents a function call."""

    arguments: str
    name: str


class ChatCompletionMessageToolCall(BaseModel):
    """Represents a tool call in a chat completion message."""

    id: str
    function: Function
    type: Literal["function"]


class Message(BaseModel):
    """Represents a message in a chat completion."""

    content: Optional[str] = None
    reasoning_content: Optional[str] = None
    tool_calls: Optional[List[ChatCompletionMessageToolCall]] = None
    role: Optional[Literal["user", "assistant", "system", "tool"]] = None
    refusal: Optional[str] = None


class CompletionTokensDetails(BaseModel):
    """Details about the tokens used in a completion."""

    accepted_prediction_tokens: Optional[int] = None
    """
    When using Predicted Outputs, the number of tokens in the prediction that
    appeared in the completion.
    """

    audio_tokens: Optional[int] = None
    """Audio input tokens generated by the model."""

    reasoning_tokens: Optional[int] = None
    """Tokens generated by the model for reasoning."""

    rejected_prediction_tokens: Optional[int] = None
    """
    When using Predicted Outputs, the number of tokens in the prediction that did
    not appear in the completion. However, like reasoning tokens, these tokens are
    still counted in the total completion tokens for purposes of billing, output,
    and context window limits.
    """


class PromptTokensDetails(BaseModel):
    """Details about the tokens used in a prompt."""

    text_tokens: Optional[int] = None
    """Tokens generated by the model for text."""

    audio_tokens: Optional[int] = None
    """Audio input tokens present in the prompt."""

    cached_tokens: Optional[int] = None
    """Cached tokens present in the prompt."""


class CompletionUsage(BaseModel):
    """Represents the token usage for a completion."""

    completion_tokens: Optional[int] = None
    """Number of tokens in the generated completion."""

    prompt_tokens: Optional[int] = None
    """Number of tokens in the prompt."""

    total_tokens: Optional[int] = None
    """Total number of tokens used in the request (prompt + completion)."""

    completion_tokens_details: Optional[CompletionTokensDetails] = None
    """Breakdown of tokens used in a completion."""

    prompt_tokens_details: Optional[PromptTokensDetails] = None
    """Breakdown of tokens used in the prompt."""


class Word(BaseModel):
    """Represents a single word with timing information."""
    word: str
    start: float
    end: float
    confidence: Optional[float] = None  # Common across Deepgram, Azure, AWS
    speaker: Optional[int] = None  # Speaker diarization (Deepgram, Azure, AWS)
    speaker_confidence: Optional[float] = None  # Speaker identification confidence
    punctuated_word: Optional[str] = None  # Word with punctuation (some providers)


class Segment(BaseModel):
    """Represents a segment of transcribed text with detailed information."""
    id: int
    seek: int
    start: float
    end: float
    text: str
    # OpenAI Whisper specific fields
    tokens: Optional[List[int]] = None
    temperature: Optional[float] = None
    avg_logprob: Optional[float] = None
    compression_ratio: Optional[float] = None
    no_speech_prob: Optional[float] = None
    # Common ASR provider fields
    confidence: Optional[float] = None  # Segment-level confidence
    speaker: Optional[int] = None  # Primary speaker for this segment
    speaker_confidence: Optional[float] = None  # Speaker identification confidence
    words: Optional[List[Word]] = None  # Words within this segment


class Alternative(BaseModel):
    """Represents an alternative transcription hypothesis (common in many ASR APIs)."""
    transcript: str
    confidence: Optional[float] = None
    words: Optional[List[Word]] = None


class Channel(BaseModel):
    """Represents a single audio channel (for multi-channel audio)."""
    alternatives: List[Alternative]
    search: Optional[List[dict]] = None  # Search results if keyword search enabled


class TranscriptionResult(BaseModel):
    """
    Unified transcription result format supporting multiple ASR providers.
    Based on OpenAI Whisper API but extended for common ASR features.
    """
    # Core fields (supported by most providers)
    text: str
    language: Optional[str] = None
    confidence: Optional[float] = None  # Overall transcription confidence
    
    # OpenAI Whisper specific fields
    task: Optional[str] = None  # "transcribe" or "translate"
    duration: Optional[float] = None
    segments: Optional[List[Segment]] = None
    words: Optional[List[Word]] = None
    
    # Multi-channel and alternatives support (Deepgram, Azure, etc.)
    channels: Optional[List[Channel]] = None
    alternatives: Optional[List[Alternative]] = None
    
    # Advanced features (various providers)
    utterances: Optional[List[dict]] = None  # Speaker utterances
    paragraphs: Optional[List[dict]] = None  # Paragraph detection
    topics: Optional[List[dict]] = None  # Topic detection
    intents: Optional[List[dict]] = None  # Intent recognition
    sentiment: Optional[dict] = None  # Sentiment analysis
    summary: Optional[dict] = None  # Auto-summarization
    
    # Metadata
    metadata: Optional[dict] = None  # Provider-specific metadata
    model_info: Optional[dict] = None  # Model information
